/*
A queue is monotonous.(increasing or decreasing)
Enqueue e: scan from tail to head until finding an element d 
less than or equal to e and put e behind d and abandon all the elements behind e.
Dequeue e: scan from head to tail until finding an element d enqueue behind
e and delete all the elements before d.
*/

Problem:http://poj.org/problem?id=2823
#include<iostream>
#include<algorithm>
#include<cstdio>
using namespace std;
#define N 1000010

struct Elem
{
	 int val;
	 int pos;
};

Elem MaxQue[N];
Elem MinQue[N];
int MaxHead, MinHead, MaxTail, MinTail;
int MaxAns[N];
int MinAns[N];
int cur;

int main()
{
    int n, w, num;
	  scanf("%d%d", &n, &w);
	  MinHead = MinTail = 0;
	  MaxHead = MaxTail = 0;
	  cur = 0;
	  for(int i = 0; i < w; i++){
		    scanf("%d", &num);
		    while(MinHead < MinTail && MinQue[MinTail - 1].val >= num){
		        MinTail--;
		    }
		    MinQue[MinTail].val = num;
		    MinQue[MinTail].pos = i;
		    MinTail++;

		    while(MaxHead < MaxTail && MaxQue[MaxTail - 1].val <= num){
		        MaxTail--;
		    }
		    MaxQue[MaxTail].val = num;
		    MaxQue[MaxTail].pos = i;
		    MaxTail++;
	   }
	   for(int i = w; i < n; ++i){
		     MinAns[cur] = MinQue[MinHead].val;
		     MaxAns[cur] = MaxQue[MaxHead].val;
	    	 cur++;

		     scanf("%d", &num);

		     while(MinHead < MinTail && i - MinQue[MinHead].pos >= w){
		         MinHead++;
		     }
	       while(MinHead < MinTail && MinQue[MinTail - 1].val >= num){
	           MinTail--;
	       }
		     MinQue[MinTail].val = num;
		     MinQue[MinTail].pos = i;
		     MinTail++;
		
		     while(MaxHead < MaxTail && i - MaxQue[MaxHead].pos >= w){
		         MaxHead++;
		     }
		     while(MaxHead < MaxTail && MaxQue[MaxTail - 1].val <= num){
		        MaxTail--;
		     }
		     MaxQue[MaxTail].val = num;
		     MaxQue[MaxTail].pos = i;
		     MaxTail++;
  	}
	  MinAns[cur] = MinQue[MinHead].val;
	  MaxAns[cur] = MaxQue[MaxHead].val;
	  cur++;
	
	  for(int i = 0; i < cur; ++i){
		    if (i > 0){
		        putchar(' ');
		    }
	    	printf("%d", MinAns[i]);
	   }
	   printf("\n");
	   for(int i = 0; i < cur; ++i){
		     if (i > 0){
		         putchar(' ');
		     }
	       printf("%d", MaxAns[i]);
	   }
	   printf("\n");
	   return 0;
}

/*
Let the node at which we are starting be called the initial node v. Let the distance 
of node i be the distance from the initial node to v. Dijkstra's algorithm will assign 
some initial distance values and will try to improve them step by step.

Step 1: Assign to every node a tentative distance value: set it to zero for our initial node 
and to infinity for all other nodes.
Step 2: Set the initial node as current. Mark all other nodes unvisited(vis[i] = false). Create 
a set of all the unvisited nodes called the unvisited set.
Step 3: For the current node, consider all of its unvisited neighbors(cls[i] != 0) and calculate 
their tentative distances. Compare the newly calculated tentative distance to the current assigned 
value and assign the smaller one. 
Step 4: When we are done considering all of the neighbors of the current node, mark the current node 
as visited and remove it from the unvisited set. A visited node will never be checked again.
Step 5: If the destination node has been marked visited (when planning a route between two specific 
nodes) or if the smallest tentative distance among the nodes in the unvisited set is infinity (when 
planning a complete traversal; occurs when there is no connection between the initial node and remaining 
unvisited nodes), then stop. The algorithm has finished. Otherwise, select the unvisited node that is 
marked with the smallest tentative distance, set it as the new "current node", and go back to step 3.
*/
const int MAX = 9999999;
void Dijkstra(int v)
{
    int min, nxt;
    for(int i = 1; i <= n; i++){
        cls[i] = Map[v][i];//shortest path between v and i
    }
    memset(Vis, 0 ,sizeof(Vis));
    Vis[v] = 1;
    for(int i = 1; i <= n; i++){
        min = MAX;
        nxt = v;
        for(int j = 1; j <= n; j++){
            if(!Vis[j] && cls[j]){
                nxt = j;
                min = cls[j];
            }
        }
        Vis[nxt]=1;
        for(int j = 1; j <= n; j++){
            if(!Vis[j] && Map[nxt][j]){
                cls[j] = cls[nxt] + Map[nxt][j];
            }
        }
}
